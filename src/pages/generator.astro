---
import Layout from "../layouts/Layout.astro"
---

<Layout>
  <main data-theme="monTheme" class="grid grid-cols-1 md:grid-cols-2 gap-6 p-6 h-[calc(100vh-100px)]">

    <div class="card bg-base-200 shadow-xl p-4 flex flex-col">
      <h2 class="text-xl font-semibold mb-4">Aperçu SVG</h2>
      <div id="svg-container" class="bg-white border rounded-lg w-full flex-1 flex items-center justify-center overflow-auto">
        <span class="text-gray-400">[SVG affiché ici]</span>
      </div>
    </div>

    <div class="card bg-base-200 shadow-xl p-4 flex flex-col relative h-[calc(100vh-100px)]">
      <h2 class="text-xl font-semibold mb-4">Chat</h2>

      <div id="chat-history" class="flex flex-col gap-4 w-full overflow-y-auto overflow-x-hidden flex-grow pr-2">
        <span class="text-error">Aucun historique de chat.</span>
      </div>

      <form 
        id="input-prompt-form" 
        class="flex flex-col gap-2 w-full bg-base-300 p-4"
        autocomplete="off"
      >
        <input type="hidden" id="history-hidden" value="[]" />
        <input type="hidden" id="svg-id-hidden" value="" />

        <div class="flex items-center gap-2">
          <input 
            id="prompt-input" 
            name="editPrompt" 
            type="text" 
            class="input flex-grow" 
            placeholder="Entrez un prompt pour éditer le SVG..." 
          />
          <button class="btn btn-primary" type="submit">Edit</button>
          <button id="save-button" class="btn btn-success" type="button">Sauvegarder</button>
        </div>
      </form>
    </div>

  </main>
</Layout>

<script>
//@ts-nocheck

let promptList = [];

// Génération SVG depuis l'historique
async function generateSVG(history) {
  const res = await fetch("/api/generateSVG", { 
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(history),
  });
  return await res.json();
}

// Mise à jour du chat
function updateChat() {
  const chatHistory = document.getElementById("chat-history");
  chatHistory.innerHTML = "";

  if (promptList.length === 0) {
    chatHistory.innerHTML = `<span class="text-error">Aucun historique de chat.</span>`;
    return;
  }

  promptList.forEach(msg => {
    const wrapper = document.createElement("div");
    wrapper.className = `chat ${msg.role === "user" ? "chat-start" : "chat-end"}`;

    const bubble = document.createElement("div");
    bubble.className = `chat-bubble ${msg.role === "user" ? "bg-primary text-primary-content" : "bg-secondary text-secondary-content"}`;

    const block = document.createElement("pre");
    block.className = "whitespace-pre-wrap break-words text-xs";
    block.textContent = msg.content;
    bubble.appendChild(block);

    wrapper.appendChild(bubble);

    const footer = document.createElement("div");
    footer.className = "chat-footer opacity-60 text-xs mt-1";
    footer.textContent = msg.role;
    wrapper.appendChild(footer);

    chatHistory.appendChild(wrapper);
  });

  chatHistory.scrollTop = chatHistory.scrollHeight;
}

// Submit formulaire pour générer SVG
const form = document.getElementById("input-prompt-form");
form?.addEventListener("submit", async (e) => {
  e.preventDefault();

  const formData = new FormData(form);
  const userPrompt = formData.get("editPrompt")?.toString().trim();
  if (!userPrompt) return;

  // Ajouter le prompt de l'utilisateur
  const promptObj = { role: "user", content: userPrompt };
  promptList.push(promptObj);
  updateChat();

  // Loader
  const svgContainer = document.getElementById("svg-container");
  svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;

  // Génération SVG
  const response = await generateSVG(promptList);
  let aiResponse = response.svg?.content || "";

  // Extraire SVG
  const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
  const svgContent = svgMatch ? svgMatch[0] : "<svg></svg>";
  svgContainer.innerHTML = svgContent;

  // Ajouter la réponse de l'assistant
  promptList.push({ role: "assistant", content: svgContent });
  updateChat();

  form.reset();
});

// Création d'un nouveau SVG
async function saveSVG(params) {
  const res = await fetch("/api/saveSVG", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(params),
  });
  return await res.json();
}

// Mise à jour d'un SVG existant
async function update(updatedData) {
  const response = await fetch("/api/updateSVG", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(updatedData),
  });
  return response.json();
}

// Bouton "Sauvegarder" (création ou mise à jour selon ID)
document.getElementById("save-button")?.addEventListener("click", async () => {
  const svgOutput = document.getElementById("svg-container")?.innerHTML;
  const svgId = document.getElementById("svg-id-hidden")?.value;
  const name = prompt("Entrez un nom pour le SVG :") || "SVG sans nom";

  const params = {
    name,
    code_svg: svgOutput || "<svg></svg>",
    chat_history: promptList,
  };

  if (svgId) {
    // Update
    params.id = svgId;
    const result = await update(params);
    if (result.success) {
      alert(`SVG mis à jour avec succès (ID: ${result.record.id})`);
    } else {
      alert(`Erreur lors de la mise à jour : ${result.error}`);
    }
  } else {
    // Save
    const result = await saveSVG(params);
    if (result.success) {
      document.getElementById("svg-id-hidden").value = result.id;
      alert(`SVG sauvegardé avec succès (ID: ${result.id})`);
    } else {
      alert(`Erreur lors de la sauvegarde : ${result.error}`);
    }
  }
});
</script>
