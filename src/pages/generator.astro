---
import Layout from "../layouts/Layout.astro"
---

<Layout>
  <main data-theme="monTheme" class="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
      
    <div class="card bg-base-200 shadow-xl p-4">
      <h2 class="text-xl font-semibold mb-4">Entrer un prompt</h2>
      <textarea 
        id="user-prompt" 
        class="textarea textarea-bordered w-full h-32 mb-4" 
        placeholder="Écris ton prompt ici..."></textarea>
      
      <button id="generateBtn" class="btn btn-primary w-full mb-2">Générer</button>
      <button id="edit-button" class="btn btn-secondary w-full mb-2">Edit</button>
      <button id="save-button" class="btn btn-success w-full">Sauvegarder</button>
    </div>

    <div class="card bg-base-200 shadow-xl p-4">
      <h2 class="text-xl font-semibold mb-4">Code généré</h2>
      <pre class="bg-base-100 p-4 rounded-lg overflow-x-auto h-64">
<code id="svg-output">// Le code généré apparaîtra ici</code>
      </pre>
    </div>

    <div class="card bg-base-200 shadow-xl p-4 flex flex-col items-center justify-center">
      <h2 class="text-xl font-semibold mb-4">Aperçu SVG</h2>
      <div id="svg-container" class="bg-white border rounded-lg w-full h-64 flex items-center justify-center">
        <span class="text-gray-400">[SVG affiché ici]</span>
      </div>
    </div>

  </main>
</Layout>

<script>
//@ts-nocheck

let promptList = [];

// Fonction pour générer le SVG via l’API
async function generateSVG(promptList) {
  const res = await fetch("/api/generateSVG", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(promptList),
  });
  const data = await res.json();
  return data;
}

// Fonction Générer
async function handleSubmit() {
  const promptElement = document.getElementById("user-prompt");
  const prompt = promptElement ? promptElement.value : "";
  console.log("Prompt soumis : ", prompt);

  // Nouveau prompt -> réinitialise l'historique
  promptList.length = 0;
  promptList.push({ role: "user", content: prompt });

  const svgContainer = document.getElementById("svg-container");
  svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
  generateButton.disabled = true;

  const svgOutput = document.getElementById("svg-output");
  let aiResponse = (await generateSVG(promptList)).svg;

  const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
  aiResponse.content = svgMatch ? svgMatch[0] : "";

  promptList.push(aiResponse);

  svgOutput.textContent = aiResponse.content;
  svgContainer.innerHTML = aiResponse.content;
  generateButton.disabled = false;

  console.log("Historique des prompts : ", promptList);
}

// Fonction Edit
async function handleEdit() {
  const promptElement = document.getElementById("user-prompt");
  const prompt = promptElement ? promptElement.value : "";
  console.log("Prompt soumis pour édition : ", prompt);

  promptList.push({ role: "user", content: prompt });

  const svgContainer = document.getElementById("svg-container");
  svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
  generateButton.disabled = true;
  editButton.disabled = true;

  const svgOutput = document.getElementById("svg-output");
  let aiResponse = (await generateSVG(promptList)).svg;

  const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
  aiResponse.content = svgMatch ? svgMatch[0] : "";

  promptList.push(aiResponse);

  svgOutput.textContent = aiResponse.content;
  svgContainer.innerHTML = aiResponse.content;
  generateButton.disabled = false;
  editButton.disabled = false;

  console.log("Historique des prompts : ", promptList);
}

// Fonction Sauvegarder
async function saveSVG(params) {
  const res = await fetch("/api/saveSVG", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(params),
  });
  return await res.json();
}

// Gestionnaire du bouton Sauvegarder
const saveButton = document.getElementById("save-button");
if (saveButton) {
  saveButton.addEventListener("click", async () => {
    const name = prompt("Entrez un nom pour le SVG :");
    const svgOutput = document.getElementById("svg-output")?.textContent;
    console.log("Sauvegarde du SVG : ", svgOutput);

    const params = {
      name: name || "SVG sans nom",
      code_svg: svgOutput || "<svg></svg>",
      chat_history: promptList,
    };

    const result = await saveSVG(params);
    if (result.success) {
      alert(`SVG sauvegardé avec succès (ID: ${result.id})`);
    } else {
      alert(`Erreur lors de la sauvegarde : ${result.error}`);
    }
  });
}

// Event listeners pour Générer et Edit
const generateButton = document.getElementById("generateBtn");
if (generateButton) generateButton.addEventListener("click", handleSubmit);

const editButton = document.getElementById("edit-button");
if (editButton) editButton.addEventListener("click", handleEdit);
</script>
